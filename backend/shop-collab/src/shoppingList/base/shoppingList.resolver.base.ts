/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateShoppingListArgs } from "./CreateShoppingListArgs";
import { UpdateShoppingListArgs } from "./UpdateShoppingListArgs";
import { DeleteShoppingListArgs } from "./DeleteShoppingListArgs";
import { ShoppingListCountArgs } from "./ShoppingListCountArgs";
import { ShoppingListFindManyArgs } from "./ShoppingListFindManyArgs";
import { ShoppingListFindUniqueArgs } from "./ShoppingListFindUniqueArgs";
import { ShoppingList } from "./ShoppingList";
import { User } from "../../user/base/User";
import { ShoppingListService } from "../shoppingList.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ShoppingList)
export class ShoppingListResolverBase {
  constructor(
    protected readonly service: ShoppingListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ShoppingList",
    action: "read",
    possession: "any",
  })
  async _shoppingListsMeta(
    @graphql.Args() args: ShoppingListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ShoppingList])
  @nestAccessControl.UseRoles({
    resource: "ShoppingList",
    action: "read",
    possession: "any",
  })
  async shoppingLists(
    @graphql.Args() args: ShoppingListFindManyArgs
  ): Promise<ShoppingList[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ShoppingList, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ShoppingList",
    action: "read",
    possession: "own",
  })
  async shoppingList(
    @graphql.Args() args: ShoppingListFindUniqueArgs
  ): Promise<ShoppingList | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ShoppingList)
  @nestAccessControl.UseRoles({
    resource: "ShoppingList",
    action: "create",
    possession: "any",
  })
  async createShoppingList(
    @graphql.Args() args: CreateShoppingListArgs
  ): Promise<ShoppingList> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        owner: {
          connect: args.data.owner,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ShoppingList)
  @nestAccessControl.UseRoles({
    resource: "ShoppingList",
    action: "update",
    possession: "any",
  })
  async updateShoppingList(
    @graphql.Args() args: UpdateShoppingListArgs
  ): Promise<ShoppingList | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          owner: {
            connect: args.data.owner,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShoppingList)
  @nestAccessControl.UseRoles({
    resource: "ShoppingList",
    action: "delete",
    possession: "any",
  })
  async deleteShoppingList(
    @graphql.Args() args: DeleteShoppingListArgs
  ): Promise<ShoppingList | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "owner",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldOwner(
    @graphql.Parent() parent: ShoppingList
  ): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
